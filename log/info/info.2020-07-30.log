2020-07-30 00:09:18 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 66752 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 00:09:18 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 00:09:21 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 00:09:21 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 00:09:21 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 37ms. Found 0 Redis repository interfaces.
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$84a00168] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$85d8b013] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$86919240] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$826f36c4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$58d9fd31] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:21 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 00:09:21 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 00:09:22 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 00:09:22 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 00:09:22 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 00:09:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 00:09:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 00:09:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 00:09:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 00:09:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 00:09:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy126] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:09:23 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 00:09:23 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 00:09:23 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 00:09:23 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 00:09:24 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 00:09:24 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5095 ms
2020-07-30 00:09:24 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 00:09:24 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 00:09:24 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 00:09:24 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 00:09:24 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 00:09:24 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 00:09:24 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596038964865'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 00:09:24 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 00:09:24 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 00:09:24 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@87f1201
2020-07-30 00:09:24 INFO  main p6spy 2020-07-30 00:09:24 | 耗时 2 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 00:09:25 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 00:09:25 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 00:09:25 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 00:09:25 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 00:09:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 00:09:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 00:09:26 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 00:09:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 00:09:26 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 00:09:26 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 00:09:27 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 00:09:27 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 8.701 seconds (JVM running for 10.1)
2020-07-30 00:09:27 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 00:09:27 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 00:09:27 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 00:09:27 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596038964865 started.
2020-07-30 00:09:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 00:09:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 00:09:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 00:09:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 00:09:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 00:09:28 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 00:09:28 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 00:09:28 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 46 ms
2020-07-30 00:09:28 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 00:09:30 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 00:09:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:09:31 | 耗时 5 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 00:09:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:09:31 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 00:09:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:09:31 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 00:09:32 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 00:09:32 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 00:09:33 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 00:09:33 | 耗时 32 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:09:33 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 00:09:33 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:09:34 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:09:34 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 00:09:39 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 00:09:39 | 耗时 1 ms | SQL 语句：
UPDATE customertable SET NAME = '张三', PHONE = 15322223334, vehicle_id = 22 WHERE CUSTOMER_ID = 4;
2020-07-30 00:09:39 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 00:09:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:09:39 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 00:09:39 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:09:40 INFO  Febs-Async-Thread1 p6spy 2020-07-30 00:09:40 | 耗时 6 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改客户', 44, 'cc.mrbird.febs.system.controller.CustomerController.updateCustomer()', ' customer: "Customer(customerId=4, name=张三, gender=null, phone=15322223334, purchasingDate=null, vehicleId=22, purchasingDateFrom=null, purchasingDateTo=null)"', '192.168.137.1', '2020-07-30T00:09:39.962+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 00:09:42 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596038964865_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 00:09:42 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596038964865_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596038332257"'s failed in-progress jobs.
2020-07-30 00:09:44 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 00:09:44 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 00:09:53 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 00:09:53 | 耗时 1 ms | SQL 语句：
UPDATE customertable SET NAME = '张三', PHONE = 15322223334, vehicle_id = 22 WHERE CUSTOMER_ID = 4;
2020-07-30 00:09:53 INFO  Febs-Async-Thread2 p6spy 2020-07-30 00:09:53 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改客户', 7, 'cc.mrbird.febs.system.controller.CustomerController.updateCustomer()', ' customer: "Customer(customerId=4, name=张三, gender=null, phone=15322223334, purchasingDate=null, vehicleId=22, purchasingDateFrom=null, purchasingDateTo=null)"', '192.168.137.1', '2020-07-30T00:09:53.102+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 00:09:53 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 00:09:53 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:09:53 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 00:09:53 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:10:31 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 00:10:31 | 耗时 9 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 00:10:59 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:10:59 | 耗时 3 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 00:10:59 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:10:59 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 00:10:59 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:10:59 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 00:11:00 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 00:11:00 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 00:11:00 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 00:11:00 | 耗时 16 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:11:00 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 00:11:00 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:11:02 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 00:11:02 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 00:11:09 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 00:11:09 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 00:14:35 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 71164 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 00:14:35 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 00:14:36 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 00:14:36 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 00:14:37 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$83622f07] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$849addb2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$8553bfdf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$81316463] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$579c2ad0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 00:14:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 00:14:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 00:14:37 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 00:14:37 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 00:14:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 00:14:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 00:14:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 00:14:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 00:14:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy126] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 00:14:39 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 00:14:39 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 00:14:39 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 00:14:39 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 00:14:39 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 00:14:39 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 3799 ms
2020-07-30 00:14:40 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 00:14:40 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 00:14:40 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 00:14:40 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 00:14:40 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 00:14:40 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 00:14:40 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596039280360'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 00:14:40 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 00:14:40 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 00:14:40 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@77648321
2020-07-30 00:14:40 INFO  main p6spy 2020-07-30 00:14:40 | 耗时 14 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 00:14:41 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 00:14:41 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 00:14:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 00:14:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 00:14:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 00:14:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 00:14:41 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 00:14:41 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 00:14:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 00:14:42 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 00:14:42 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 00:14:42 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 00:14:42 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 7.273 seconds (JVM running for 8.926)
2020-07-30 00:14:42 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 00:14:42 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 00:14:43 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 00:14:43 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596039280360 started.
2020-07-30 00:14:43 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 00:14:43 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 00:14:43 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 00:14:43 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 00:14:43 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 00:14:43 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 00:14:43 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 00:14:44 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 18 ms
2020-07-30 00:14:44 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 00:14:45 INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 00:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 00:14:46 | 耗时 15 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 00:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 00:14:46 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 00:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 00:14:46 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 00:14:47 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 00:14:47 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 00:14:47 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 00:14:47 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:14:47 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 00:14:47 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:14:58 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596039280360_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 00:14:58 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596039280360_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596038964865"'s failed in-progress jobs.
2020-07-30 00:15:21 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 00:15:21 | 耗时 10 ms | SQL 语句：
INSERT INTO customertable (NAME, GENDER, PHONE, PURCHASING_DATE, vehicle_id) VALUES ('王五', '0', 12345678900, '2020-07-30T10:00:03.000+0800', 22);
2020-07-30 00:15:21 INFO  Febs-Async-Thread1 p6spy 2020-07-30 00:15:21 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '新增客户', 55, 'cc.mrbird.febs.system.controller.CustomerController.createCustomer()', ' customer: "Customer(customerId=5, name=王五, gender=0, phone=12345678900, purchasingDate=Thu Jul 30 10:00:03 CST 2020, vehicleId=22, purchasingDateFrom=null, purchasingDateTo=null)"', '192.168.137.1', '2020-07-30T00:15:21.950+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 00:15:21 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 00:15:21 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:15:21 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 00:15:21 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:15:24 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 00:15:24 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 5;
2020-07-30 00:15:27 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 00:15:27 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 5;
2020-07-30 00:15:32 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 00:15:32 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 5;
2020-07-30 00:15:39 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 00:15:39 | 耗时 10 ms | SQL 语句：
UPDATE customertable SET NAME = '王五', PHONE = 12345678901, vehicle_id = 22 WHERE CUSTOMER_ID = 5;
2020-07-30 00:15:39 INFO  Febs-Async-Thread2 p6spy 2020-07-30 00:15:39 | 耗时 1 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改客户', 20, 'cc.mrbird.febs.system.controller.CustomerController.updateCustomer()', ' customer: "Customer(customerId=5, name=王五, gender=null, phone=12345678901, purchasingDate=null, vehicleId=22, purchasingDateFrom=null, purchasingDateTo=null)"', '192.168.137.1', '2020-07-30T00:15:39.801+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 00:15:39 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:15:39 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:15:39 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 00:15:39 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:15:44 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 00:15:44 | 耗时 1 ms | SQL 语句：
DELETE FROM customertable WHERE CUSTOMER_ID IN ('5');
2020-07-30 00:15:44 INFO  Febs-Async-Thread3 p6spy 2020-07-30 00:15:44 | 耗时 1 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '删除客户', 18, 'cc.mrbird.febs.system.controller.CustomerController.deleteCustomers()', ' customerIds: "5"', '192.168.137.1', '2020-07-30T00:15:44.201+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 00:15:44 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 00:15:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 00:15:44 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 00:15:44 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 00:18:34 INFO  lettuce-nioEventLoop-4-1 io.lettuce.core.protocol.CommandHandler null Unexpected exception during request: java.net.SocketException: Connection reset
java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:345)
	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:376)
	at io.netty.buffer.PooledByteBuf.setBytes(PooledByteBuf.java:253)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1133)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:350)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:148)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:830)
2020-07-30 00:18:34 INFO  lettuce-eventExecutorLoop-1-4 io.lettuce.core.protocol.ConnectionWatchdog Reconnecting, last destination was /127.0.0.1:6379
2020-07-30 08:55:26 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 15120 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 08:55:26 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 08:55:29 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 08:55:29 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 08:55:29 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 51ms. Found 0 Redis repository interfaces.
2020-07-30 08:55:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$62623097] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$639adf42] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6453c16f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$603165f3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$369c2c60] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:55:30 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 08:55:30 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 08:55:33 INFO  main org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-07-30 08:56:19 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 11500 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 08:56:19 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 08:56:20 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 08:56:20 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 08:56:20 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 37ms. Found 0 Redis repository interfaces.
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4fa6341c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$50dee2c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$5197c4f4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$4d756978] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$23e02fe5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 08:56:21 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 08:56:21 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 08:56:21 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 08:56:21 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 08:56:21 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 08:56:21 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 08:56:21 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 08:56:21 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 08:56:21 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy129] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 08:56:23 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 08:56:23 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 08:56:23 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 08:56:23 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 08:56:23 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 08:56:23 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 4318 ms
2020-07-30 08:56:24 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 08:56:24 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 08:56:24 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 08:56:24 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 08:56:24 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 08:56:24 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 08:56:24 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596070584835'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 08:56:24 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 08:56:24 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 08:56:24 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1ddc889b
2020-07-30 08:56:24 INFO  main p6spy 2020-07-30 08:56:24 | 耗时 5 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 08:56:25 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 08:56:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 08:56:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 08:56:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 08:56:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 08:56:26 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 08:56:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 08:56:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 08:56:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 08:56:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 08:56:27 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 08:56:27 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 08:56:27 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 08:56:27 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 8.274 seconds (JVM running for 9.781)
2020-07-30 08:56:27 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 08:56:27 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 08:56:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 08:56:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 08:56:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596039280360"'s failed in-progress jobs.
2020-07-30 08:56:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596070584835 started.
2020-07-30 08:56:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 08:56:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 08:56:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 08:56:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 08:56:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 08:56:28 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 08:56:28 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 08:56:28 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 31 ms
2020-07-30 08:56:28 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 08:56:30 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 08:56:44 INFO  http-nio-8080-exec-3 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_login192.168.137.1]，描述为 [登录接口] 的接口
2020-07-30 08:56:44 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 08:56:44 | 耗时 13 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 08:56:44 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 08:56:44 | 耗时 2 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '1');
2020-07-30 08:56:44 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 08:56:44 | 耗时 9 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('mrbird', '2020-07-30T08:56:44.470+0800', '内网IP|0|0|内网IP|内网IP', '192.168.137.1', 'Windows 10', 'Chrome 84');
2020-07-30 08:56:44 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 08:56:44 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 08:56:44 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 08:56:44 | 耗时 5 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 08:56:44 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 08:56:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 08:56:45 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 08:56:45 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 08:56:45 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 08:56:45 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-07-30 08:56:45 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 08:56:45 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 08:56:45 INFO  Febs-Async-Thread1 p6spy 2020-07-30 08:56:45 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-07-30T08:56:45.677+0800' WHERE (USERNAME = 'MrBird');
2020-07-30 08:56:45 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 08:56:45 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 08:56:45 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 08:56:45 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-07-30 08:56:45 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 08:56:45 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-07-30 08:56:51 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 08:56:51 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 08:56:51 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 08:56:51 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 08:56:51 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 08:56:51 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 08:56:51 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 08:56:51 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 08:56:55 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 08:56:55 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 5;
2020-07-30 08:58:04 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 08:58:04 | 耗时 11 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 5;
2020-07-30 09:01:10 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 15168 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 09:01:10 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 09:01:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 09:01:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 09:01:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 50ms. Found 0 Redis repository interfaces.
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$3d488c56] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$3e813b01] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$3f3a1d2e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$3b17c1b2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$1182881f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 09:01:12 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 09:01:13 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 09:01:13 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 09:01:13 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 09:01:13 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 09:01:13 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 09:01:13 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 09:01:13 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 09:01:13 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 09:01:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy126] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:01:14 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 09:01:14 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 09:01:14 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 09:01:14 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 09:01:14 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 09:01:14 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 4226 ms
2020-07-30 09:01:15 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 09:01:15 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 09:01:15 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 09:01:15 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 09:01:15 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 09:01:15 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 09:01:15 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596070875583'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 09:01:15 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 09:01:15 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 09:01:15 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@a72925
2020-07-30 09:01:15 INFO  main p6spy 2020-07-30 09:01:15 | 耗时 10 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 09:01:16 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 09:01:16 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 09:01:16 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:01:16 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 09:01:16 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:01:16 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 09:01:16 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 09:01:17 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 09:01:17 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 09:01:17 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 09:01:18 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 09:01:18 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 8.018 seconds (JVM running for 9.417)
2020-07-30 09:01:18 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 09:01:18 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 09:01:18 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 09:01:18 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596070875583 started.
2020-07-30 09:01:18 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 09:01:18 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 09:01:18 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 09:01:18 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 09:01:18 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 09:01:19 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 09:01:19 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 09:01:19 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 18 ms
2020-07-30 09:01:19 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 09:01:21 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:01:21 | 耗时 6 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:01:21 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:01:21 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:01:21 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:01:21 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:01:23 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:01:23 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:01:23 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:01:23 | 耗时 18 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:01:23 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:01:23 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:01:26 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:01:26 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 5;
2020-07-30 09:01:33 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596070875583_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 09:01:33 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596070875583_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596070584835"'s failed in-progress jobs.
2020-07-30 09:03:20 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 5488 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 09:03:20 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 09:03:21 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 09:03:21 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 09:03:21 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 36ms. Found 0 Redis repository interfaces.
2020-07-30 09:03:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$7f178fe9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$80503e94] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$810920c1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$7ce6c545] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$53518bb2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 09:03:22 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 09:03:22 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 09:03:22 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 09:03:22 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 09:03:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 09:03:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 09:03:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 09:03:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 09:03:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:03:24 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 09:03:24 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 09:03:24 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 09:03:24 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 09:03:24 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 09:03:24 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 3866 ms
2020-07-30 09:03:24 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 09:03:25 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 09:03:25 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 09:03:25 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 09:03:25 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 09:03:25 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 09:03:25 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596071005027'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 09:03:25 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 09:03:25 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 09:03:25 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@68feca3a
2020-07-30 09:03:25 INFO  main p6spy 2020-07-30 09:03:25 | 耗时 10 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 09:03:26 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 09:03:26 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 09:03:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:03:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 09:03:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:03:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 09:03:26 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 09:03:26 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 09:03:26 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 09:03:26 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 09:03:26 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 09:03:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 09:03:27 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 09:03:27 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 09:03:27 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 09:03:27 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 7.593 seconds (JVM running for 9.058)
2020-07-30 09:03:27 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 09:03:27 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 09:03:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 09:03:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 09:03:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596070875583"'s failed in-progress jobs.
2020-07-30 09:03:28 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596071005027 started.
2020-07-30 09:03:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 09:03:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 09:03:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 09:03:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 09:03:28 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 09:03:28 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 09:03:28 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 09:03:28 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 17 ms
2020-07-30 09:03:28 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 09:03:30 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 09:03:32 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:03:32 | 耗时 11 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:03:32 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:03:32 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:03:32 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:03:32 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:03:33 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:03:33 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:03:33 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:03:33 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:03:33 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:03:33 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:03:35 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:03:35 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 6;
2020-07-30 09:03:38 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:03:38 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 5;
2020-07-30 09:04:03 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:04:03 | 耗时 12 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:04:12 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:04:12 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 2;
2020-07-30 09:04:15 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:04:15 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 3;
2020-07-30 09:04:18 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:04:18 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 1;
2020-07-30 09:04:42 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:04:42 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 1;
2020-07-30 09:07:29 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 15796 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 09:07:29 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 09:07:31 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 09:07:31 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 09:07:31 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 39ms. Found 0 Redis repository interfaces.
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4486ced3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$45bf7d7e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$46785fab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$4256042f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$18c0ca9c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:31 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 09:07:31 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 09:07:32 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 09:07:32 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 09:07:32 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 09:07:32 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 09:07:32 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 09:07:32 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 09:07:32 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 09:07:32 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 09:07:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy129] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:07:33 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 09:07:33 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 09:07:33 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 09:07:33 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 09:07:33 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 09:07:33 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 3814 ms
2020-07-30 09:07:34 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 09:07:34 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 09:07:34 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 09:07:34 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 09:07:34 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 09:07:34 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 09:07:34 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596071254536'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 09:07:34 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 09:07:34 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 09:07:34 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7c0a6f62
2020-07-30 09:07:34 INFO  main p6spy 2020-07-30 09:07:34 | 耗时 9 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 09:07:35 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 09:07:35 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 09:07:35 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:07:35 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 09:07:35 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:07:35 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 09:07:35 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 09:07:36 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 09:07:36 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 09:07:36 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 09:07:37 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 09:07:37 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 7.535 seconds (JVM running for 9.122)
2020-07-30 09:07:37 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 09:07:37 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 09:07:37 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 09:07:37 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 09:07:37 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596071005027"'s failed in-progress jobs.
2020-07-30 09:07:37 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596071254536 started.
2020-07-30 09:07:37 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 09:07:37 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 09:07:37 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 09:07:37 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 09:07:37 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 09:07:38 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 09:07:38 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 09:07:38 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 14 ms
2020-07-30 09:07:38 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 09:07:42 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:07:42 | 耗时 13 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:07:42 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:07:42 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:07:42 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:07:42 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:07:43 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:07:43 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:07:43 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:07:43 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:07:43 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:07:43 | 耗时 1 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:07:45 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:07:45 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 5;
2020-07-30 09:07:50 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:07:50 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 5;
2020-07-30 09:08:00 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:08:00 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 2;
2020-07-30 09:08:06 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:08:06 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 2;
2020-07-30 09:08:06 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:08:06 | 耗时 1 ms | SQL 语句：
UPDATE ordertable SET SALES_ID = 13, CUSTOMER_NAME = 'lisi', CUSTOMER_PHONE = '12345678911', VEHICLE_ID = 11, PRICE = 202222 WHERE ORDER_ID = 2;
2020-07-30 09:08:06 INFO  Febs-Async-Thread1 p6spy 2020-07-30 09:08:06 | 耗时 17 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改订单', 56, 'cc.mrbird.febs.system.controller.OrderController.updateOrder()', ' order: "Order(orderId=2, salesId=13, customerName=lisi, customerPhone=12345678911, vehicleId=11, price=202222, createTime=null, status=null, createTimeFrom=null, createTimeTo=null)"', '192.168.137.1', '2020-07-30T09:08:06.510+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 09:08:06 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:08:06 | 耗时 59 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:08:06 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:08:06 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:09:16 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:09:16 | 耗时 12 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:09:16 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:09:16 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:09:16 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:09:16 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:09:16 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:09:16 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:09:17 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:09:17 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:09:17 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:09:17 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:14:01 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:14:01 | 耗时 11 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:14:01 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:14:01 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:14:01 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:14:01 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:14:02 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:14:02 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:14:02 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:14:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:14:02 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:14:02 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:14:08 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:14:08 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:14:08 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:14:08 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:14:34 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:14:34 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:14:34 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:14:34 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:14:34 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:14:34 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:14:35 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:14:35 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:14:35 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:14:35 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:14:35 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:14:35 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:14:41 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:14:41 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:14:41 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:14:41 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:14:41 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:14:41 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:14:42 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:14:42 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:14:42 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:14:42 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:14:42 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:14:42 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:16:04 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:16:04 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-07-30 09:16:04 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:16:04 | 耗时 2 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-07-30 09:16:04 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:16:04 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-07-30 09:16:14 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:16:14 | 耗时 9 ms | SQL 语句：
UPDATE t_role SET ROLE_NAME = '系统管理员', REMARK = '系统管理员，拥有所有操作权限 ^_^', MODIFY_TIME = '2020-07-30T09:16:14.828+0800' WHERE ROLE_ID = 1;
2020-07-30 09:16:14 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:16:14 | 耗时 2 ms | SQL 语句：
DELETE FROM t_role_menu WHERE (ROLE_ID IN ('1'));
2020-07-30 09:16:14 INFO  Febs-Async-Thread2 p6spy 2020-07-30 09:16:14 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改角色', 88, 'cc.mrbird.febs.system.controller.RoleController.updateRole()', ' role: "Role(roleId=1, roleName=系统管理员, remark=系统管理员，拥有所有操作权限 ^_^, createTime=null, modifyTime=Thu Jul 30 09:16:14 CST 2020, menuIds=196,197,203,200,199,198,201,204,205,206,207,210,211,212,213,215,1,3,11,12,13,161,160,4,14,162,15,16,5,163,17,18,19,6,20,21,22,164,2,8,23,10,24,170,136,172,171,127,128,129,131,175,101,102,103,104,105,106,107,108,173,109,174,110,137,138,165,139,166,115,132,133,135,134,126,159,116,117,119,120,121,122,123,118,125,169,168,167,178)"', '192.168.137.1', '2020-07-30T09:16:14.915+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 09:16:14 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:16:14 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:16:14 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:16:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:16:14 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:16:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-07-30 09:16:14 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:16:14 | 耗时 2 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-07-30 09:16:17 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:16:17 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:16:17 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:16:17 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:16:17 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:16:17 | 耗时 12 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:16:18 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:16:18 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:16:18 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:16:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-07-30 09:16:18 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:16:18 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-07-30 09:16:18 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:16:18 | 耗时 3 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-07-30 09:16:20 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:16:20 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 09:16:20 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:16:20 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 09:26:16 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:26:16 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-07-30 09:26:33 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:26:33 | 耗时 11 ms | SQL 语句：
UPDATE t_role SET ROLE_NAME = '系统管理员', REMARK = '系统管理员，拥有所有操作权限 ^_^', MODIFY_TIME = '2020-07-30T09:26:33.059+0800' WHERE ROLE_ID = 1;
2020-07-30 09:26:33 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:26:33 | 耗时 3 ms | SQL 语句：
DELETE FROM t_role_menu WHERE (ROLE_ID IN ('1'));
2020-07-30 09:26:33 INFO  Febs-Async-Thread3 p6spy 2020-07-30 09:26:33 | 耗时 1 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改角色', 64, 'cc.mrbird.febs.system.controller.RoleController.updateRole()', ' role: "Role(roleId=1, roleName=系统管理员, remark=系统管理员，拥有所有操作权限 ^_^, createTime=null, modifyTime=Thu Jul 30 09:26:33 CST 2020, menuIds=196,197,203,200,199,198,201,204,205,206,207,210,211,212,213,214,215,1,3,11,12,13,161,160,4,14,162,15,16,5,163,17,18,19,6,20,21,22,164,2,8,23,10,24,170,136,172,171,127,128,129,131,175,101,102,103,104,105,106,107,108,173,109,174,110,137,138,165,139,166,115,132,133,135,134,126,159,116,117,119,120,121,122,123,118,125,169,168,167,178)"', '192.168.137.1', '2020-07-30T09:26:33.122+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 09:26:33 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:26:33 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:26:33 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:26:33 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:26:33 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:26:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-07-30 09:26:33 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:26:33 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-07-30 09:28:01 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 14048 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 09:28:01 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 09:28:03 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 09:28:03 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 09:28:03 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 49ms. Found 0 Redis repository interfaces.
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$d1750297] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$d2adb142] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$d366936f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$cf4437f3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$a5aefe60] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:03 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 09:28:03 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 09:28:04 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 09:28:04 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 09:28:04 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 09:28:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 09:28:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 09:28:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 09:28:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 09:28:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 09:28:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:28:05 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 09:28:05 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 09:28:05 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 09:28:05 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 09:28:05 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 09:28:05 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 4529 ms
2020-07-30 09:28:06 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 09:28:07 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 09:28:07 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 09:28:07 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 09:28:07 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 09:28:07 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 09:28:07 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596072487010'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 09:28:07 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 09:28:07 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 09:28:07 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@71634e64
2020-07-30 09:28:07 INFO  main p6spy 2020-07-30 09:28:07 | 耗时 1 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 09:28:08 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 09:28:08 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 09:28:08 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:28:08 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 09:28:08 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:28:08 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 09:28:08 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 09:28:09 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 09:28:09 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 09:28:09 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 09:28:09 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 09:28:09 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 9.18 seconds (JVM running for 11.674)
2020-07-30 09:28:10 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 09:28:10 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 09:28:10 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 09:28:10 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 09:28:10 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596071254536"'s failed in-progress jobs.
2020-07-30 09:28:10 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596072487010 started.
2020-07-30 09:28:10 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 09:28:10 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 09:28:10 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 09:28:10 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 09:28:10 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 09:28:11 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 09:28:11 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 09:28:11 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 27 ms
2020-07-30 09:28:11 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 09:28:13 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:28:13 | 耗时 3 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:28:13 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:28:13 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:28:13 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:28:13 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:28:14 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:28:14 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:28:14 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:28:14 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-07-30 09:28:14 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:28:14 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-07-30 09:28:14 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:28:14 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-07-30 09:28:18 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:28:18 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 09:28:18 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:28:18 | 耗时 2 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 09:28:19 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:28:19 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 09:28:30 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:28:30 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:28:30 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:28:30 | 耗时 2 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:28:31 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:28:31 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 1;
2020-07-30 09:29:08 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 17808 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 09:29:08 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 09:29:09 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 09:29:09 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 09:29:09 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 39ms. Found 0 Redis repository interfaces.
2020-07-30 09:29:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$482157be] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$495a0669] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$4a12e896] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$45f08d1a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$1c5b5387] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 09:29:10 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 09:29:10 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 09:29:10 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 09:29:10 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 09:29:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 09:29:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 09:29:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 09:29:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 09:29:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:29:12 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 09:29:12 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 09:29:12 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 09:29:12 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 09:29:12 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 09:29:12 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 4137 ms
2020-07-30 09:29:12 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 09:29:13 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 09:29:13 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 09:29:13 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 09:29:13 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 09:29:13 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 09:29:13 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596072553042'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 09:29:13 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 09:29:13 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 09:29:13 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@27691ee8
2020-07-30 09:29:13 INFO  main p6spy 2020-07-30 09:29:13 | 耗时 1 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 09:29:14 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 09:29:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:29:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 09:29:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:29:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 09:29:14 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 09:29:14 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 09:29:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 09:29:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 09:29:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 09:29:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 09:29:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 09:29:15 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 09:29:15 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 09:29:15 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 09:29:15 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 7.787 seconds (JVM running for 9.437)
2020-07-30 09:29:15 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 09:29:15 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 09:29:16 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 09:29:16 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596072553042 started.
2020-07-30 09:29:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 09:29:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 09:29:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 09:29:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 09:29:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 09:29:16 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 09:29:16 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 09:29:16 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 18 ms
2020-07-30 09:29:16 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 09:29:19 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:29:19 | 耗时 8 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:29:19 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:29:19 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:29:19 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:29:19 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:29:20 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:29:20 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:29:20 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:29:20 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:29:20 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:29:20 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:29:31 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596072553042_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 09:29:31 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596072553042_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596072487010"'s failed in-progress jobs.
2020-07-30 09:29:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:29:31 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-07-30 09:29:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:29:31 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 09:29:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:29:31 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 09:29:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:29:31 | 耗时 0 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-07-30 09:29:31 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:29:31 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-07-30 09:29:31 INFO  Febs-Async-Thread1 p6spy 2020-07-30 09:29:31 | 耗时 10 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-07-30T09:29:31.936+0800' WHERE (USERNAME = 'MrBird');
2020-07-30 09:32:52 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:32:52 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 09:32:52 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:32:52 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-07-30 09:32:52 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:32:52 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-07-30 09:33:04 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:33:04 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:33:04 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:33:04 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 09:34:40 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:34:40 | 耗时 9 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:34:45 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:34:45 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:37:13 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:37:13 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 09:37:13 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:37:13 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 09:37:14 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:37:14 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 09:40:13 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 17904 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 09:40:13 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 09:40:15 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 09:40:15 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 09:40:15 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 43ms. Found 0 Redis repository interfaces.
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$2f2227c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$305ad673] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$3113b8a0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$2cf15d24] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$35c2391] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:15 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 09:40:15 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 09:40:16 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 09:40:16 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 09:40:16 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 09:40:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 09:40:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 09:40:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 09:40:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 09:40:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 09:40:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy126] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 09:40:17 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 09:40:17 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 09:40:17 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 09:40:17 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 09:40:17 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 09:40:17 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 4308 ms
2020-07-30 09:40:18 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 09:40:18 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 09:40:18 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 09:40:18 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 09:40:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 09:40:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 09:40:18 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596073218724'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 09:40:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 09:40:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 09:40:18 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@78324e97
2020-07-30 09:40:18 INFO  main p6spy 2020-07-30 09:40:18 | 耗时 10 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 09:40:19 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 09:40:19 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 09:40:19 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:40:19 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 09:40:19 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 09:40:19 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 09:40:20 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 09:40:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 09:40:20 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 09:40:20 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 09:40:21 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 09:40:21 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 8.057 seconds (JVM running for 9.497)
2020-07-30 09:40:21 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 09:40:21 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 09:40:21 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 09:40:21 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596073218724 started.
2020-07-30 09:40:21 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 09:40:21 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 09:40:21 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 09:40:21 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 09:40:21 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 09:40:22 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 09:40:22 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 09:40:22 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 45 ms
2020-07-30 09:40:22 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 09:40:23 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 09:40:28 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:40:28 | 耗时 13 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:40:28 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:40:28 | 耗时 5 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:40:28 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:40:28 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:40:29 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:40:29 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:40:30 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:40:30 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 09:40:30 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:40:30 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 09:40:31 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:40:31 | 耗时 1 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 09:40:34 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:40:34 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:40:34 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:40:34 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 09:40:36 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:40:36 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:40:36 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596073218724_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 09:40:36 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596073218724_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596072553042"'s failed in-progress jobs.
2020-07-30 09:40:38 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:40:38 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 5;
2020-07-30 09:40:58 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:40:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:40:58 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:40:58 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:40:58 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:40:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:40:59 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:40:59 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:40:59 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:40:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:40:59 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:40:59 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 09:41:00 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:41:00 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:41:08 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:41:08 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:44:38 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:44:38 | 耗时 14 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:44:38 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:44:38 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:44:38 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:44:38 | 耗时 7 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:44:39 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:44:39 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:44:39 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:44:39 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:44:39 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:44:39 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 09:44:40 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:44:40 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:44:58 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:44:58 | 耗时 18 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 09:44:58 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:44:58 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 09:44:59 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:44:59 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 09:45:31 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:45:31 | 耗时 11 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:45:31 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:45:31 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:45:31 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:45:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:45:31 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:45:31 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:45:32 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:45:32 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 09:45:32 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:45:32 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 09:45:32 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:45:32 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 09:45:38 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:45:38 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:45:38 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:45:38 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:45:40 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:45:40 | 耗时 9 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:45:47 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:45:47 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:47:41 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:47:41 | 耗时 9 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:47:44 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:47:44 | 耗时 12 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:47:44 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:47:44 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:47:44 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:47:44 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:47:45 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:47:45 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:47:45 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:47:45 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:47:45 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 09:47:45 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:47:46 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:47:46 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 1;
2020-07-30 09:48:58 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:48:58 | 耗时 10 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 09:48:58 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:48:58 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 09:48:58 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:48:58 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 09:48:59 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:48:59 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 09:48:59 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:48:59 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:48:59 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:48:59 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:49:00 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:49:00 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 1;
2020-07-30 09:49:44 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:49:44 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:49:44 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:49:44 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 09:49:46 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 09:49:46 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 09:49:56 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:49:56 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 09:49:56 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:49:56 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 09:49:57 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 09:49:57 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE c.customer_id = 4;
2020-07-30 09:50:28 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:50:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:50:28 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:50:28 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:50:29 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:50:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:50:29 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:50:29 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:50:38 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:50:38 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 1;
2020-07-30 09:54:50 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:54:50 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:54:50 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 09:54:50 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 10,10;
2020-07-30 09:54:52 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:54:52 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 09:54:52 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 09:54:52 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 09:55:24 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:55:24 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:55:24 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 09:55:24 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 09:55:25 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:55:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:55:25 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 09:55:25 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 09:55:35 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 09:55:35 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 5;
2020-07-30 09:55:44 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:55:44 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 3;
2020-07-30 09:55:44 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:55:44 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 3;
2020-07-30 09:55:44 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 09:55:44 | 耗时 10 ms | SQL 语句：
UPDATE vehicletable SET MAINTENANCE_TIMES = 18 WHERE (VEHICLE_ID = 3);
2020-07-30 09:55:44 INFO  Febs-Async-Thread1 p6spy 2020-07-30 09:55:44 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '保养车辆', 83, 'cc.mrbird.febs.system.controller.VehicleController.maintenanceVehicles()', ' vehicleIds: "3"', '192.168.137.1', '2020-07-30T09:55:44.916+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 09:55:44 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:55:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 09:55:44 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 09:55:44 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:00:08 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:00:08 | 耗时 11 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:00:08 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:00:08 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:00:08 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:00:08 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:00:09 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:00:09 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 10:00:09 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:00:09 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:00:09 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:00:09 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:00:09 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:00:09 | 耗时 15 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:00:09 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:00:09 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:00:15 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:00:15 | 耗时 1 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 1;
2020-07-30 10:00:15 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:00:15 | 耗时 9 ms | SQL 语句：
UPDATE vehicletable SET STATUS = '1' WHERE (VEHICLE_ID = 1);
2020-07-30 10:00:15 INFO  Febs-Async-Thread2 p6spy 2020-07-30 10:00:15 | 耗时 1 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '出售车辆', 23, 'cc.mrbird.febs.system.controller.VehicleController.saleVehicles()', ' vehicleIds: "1"', '192.168.137.1', '2020-07-30T10:00:15.190+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 10:00:15 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:00:15 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:00:15 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:00:15 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:00:18 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:00:18 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 2;
2020-07-30 10:00:18 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:00:18 | 耗时 10 ms | SQL 语句：
UPDATE vehicletable SET STATUS = '1' WHERE (VEHICLE_ID = 2);
2020-07-30 10:00:18 INFO  Febs-Async-Thread3 p6spy 2020-07-30 10:00:18 | 耗时 1 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '出售车辆', 19, 'cc.mrbird.febs.system.controller.VehicleController.saleVehicles()', ' vehicleIds: "2"', '192.168.137.1', '2020-07-30T10:00:18.137+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 10:00:18 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:00:18 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:00:18 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:00:18 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:00:20 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:00:20 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE v.vehicle_id = 5;
2020-07-30 10:00:20 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:00:20 | 耗时 9 ms | SQL 语句：
UPDATE vehicletable SET STATUS = '1' WHERE (VEHICLE_ID = 5);
2020-07-30 10:00:20 INFO  Febs-Async-Thread4 p6spy 2020-07-30 10:00:20 | 耗时 1 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '出售车辆', 21, 'cc.mrbird.febs.system.controller.VehicleController.saleVehicles()', ' vehicleIds: "5"', '192.168.137.1', '2020-07-30T10:00:20.850+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 10:00:20 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:00:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:00:20 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:00:20 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:00:32 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:00:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:00:32 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:00:32 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:00:50 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:00:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:00:50 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:00:50 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:00:52 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:00:52 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:00:52 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:00:52 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:00:55 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:00:55 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 10:00:55 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:00:55 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 10:01:02 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:01:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:01:02 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:01:02 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:01:04 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:01:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:01:04 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:01:04 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:04:55 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:04:55 | 耗时 12 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:04:55 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:04:55 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:04:55 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:04:55 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:04:56 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:04:56 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 10:04:56 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:04:56 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:04:56 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:04:56 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:04:58 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:04:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:04:58 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:04:58 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:05:00 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:05:00 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:05:00 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:05:00 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:05:55 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:05:55 | 耗时 13 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:05:55 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:05:55 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:05:55 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:05:55 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:05:56 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:05:56 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 10:05:56 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:05:56 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:05:56 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:05:56 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:06:00 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:06:00 | 耗时 1 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 1;
2020-07-30 10:06:05 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:06:05 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 2;
2020-07-30 10:06:08 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:06:08 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 5;
2020-07-30 10:06:10 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:06:10 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 6;
2020-07-30 10:06:12 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:06:12 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 7;
2020-07-30 10:06:29 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:06:29 | 耗时 1 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 3;
2020-07-30 10:08:00 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 17776 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 10:08:00 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 10:08:01 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 10:08:01 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 10:08:01 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 36ms. Found 0 Redis repository interfaces.
2020-07-30 10:08:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$22e28135] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$241b2fe0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$24d4120d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$20b1b691] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$f71c7cfe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 10:08:02 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 10:08:02 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 10:08:02 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 10:08:02 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 10:08:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 10:08:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 10:08:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 10:08:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 10:08:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:08:04 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 10:08:04 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 10:08:04 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 10:08:04 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 10:08:04 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 10:08:04 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 4032 ms
2020-07-30 10:08:04 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 10:08:04 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 10:08:04 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 10:08:04 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 10:08:04 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 10:08:04 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 10:08:04 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596074884882'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 10:08:04 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 10:08:04 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 10:08:04 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@796613b7
2020-07-30 10:08:05 INFO  main p6spy 2020-07-30 10:08:05 | 耗时 10 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 10:08:05 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 10:08:06 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 10:08:06 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 10:08:06 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 10:08:06 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 10:08:06 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 10:08:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 10:08:07 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 10:08:07 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 10:08:07 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 10:08:07 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 7.712 seconds (JVM running for 8.938)
2020-07-30 10:08:07 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 10:08:07 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 10:08:08 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 10:08:08 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596074884882 started.
2020-07-30 10:08:08 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 10:08:08 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 10:08:08 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 10:08:08 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 10:08:08 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 10:08:08 INFO  RMI TCP Connection(2)-192.168.137.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 10:08:08 INFO  RMI TCP Connection(2)-192.168.137.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 10:08:08 INFO  RMI TCP Connection(2)-192.168.137.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 16 ms
2020-07-30 10:08:08 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 10:08:10 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 10:08:12 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:08:12 | 耗时 12 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:08:12 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:08:12 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:08:12 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:08:12 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:08:13 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:08:13 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 10:08:13 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:08:13 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:08:13 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:08:13 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:08:16 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:08:16 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 3;
2020-07-30 10:08:21 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:08:21 | 耗时 1 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.order_id = 4;
2020-07-30 10:08:21 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:08:21 | 耗时 10 ms | SQL 语句：
UPDATE ordertable SET STATUS = '已归档' WHERE (ORDER_ID = 4);
2020-07-30 10:08:21 INFO  Febs-Async-Thread1 p6spy 2020-07-30 10:08:21 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '归档订单', 76, 'cc.mrbird.febs.system.controller.OrderController.archiveOrder()', ' orderIds: "4"', '192.168.137.1', '2020-07-30T10:08:21.402+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 10:08:21 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:08:21 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:08:21 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:08:21 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:08:23 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596074884882_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 10:08:23 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596074884882_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596073218724"'s failed in-progress jobs.
2020-07-30 10:10:35 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:10:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 10:10:35 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:10:35 | 耗时 1 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 10:10:55 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:10:55 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:10:55 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:10:55 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:11:07 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:11:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:11:07 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:11:07 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:11:08 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:11:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM vehicletable v WHERE 1 = 1;
2020-07-30 10:11:08 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:11:08 | 耗时 0 ms | SQL 语句：
SELECT v.vehicle_id vehicleId, v.type, v.color, v.dead_weight deadWeight, v.maintenance_times maintenanceTimes, v.lowest_price lowestPrice, v.manufacture_date manufactureDate, v.status FROM vehicletable v WHERE 1 = 1 ORDER BY vehicleId ASC LIMIT 0,10;
2020-07-30 10:11:12 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:11:12 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM customertable c WHERE 1 = 1;
2020-07-30 10:11:12 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 10:11:12 | 耗时 0 ms | SQL 语句：
SELECT c.customer_id customerId, c.name, c.gender, c.phone, c.purchasing_date purchasingDate, c.vehicle_id vehicleId FROM customertable c WHERE 1 = 1 ORDER BY customerId ASC LIMIT 0,10;
2020-07-30 10:14:05 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 10:14:05 | 耗时 2 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-07-30 10:14:05 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:14:05 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 10:14:05 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 10:14:05 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-07-30 10:14:20 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:14:20 | 耗时 13 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'beiyan' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:14:20 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:14:20 | 耗时 1 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '9');
2020-07-30 10:14:34 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:14:34 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 10:14:34 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:14:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY createTime ASC LIMIT 0,10;
2020-07-30 10:15:24 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:15:24 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:15:24 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:15:24 | 耗时 11 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:15:25 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:15:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:15:26 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:15:26 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 10:15:26 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:15:26 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-07-30 10:15:26 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:15:26 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 10:15:26 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:15:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-07-30 10:15:27 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:15:27 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Reina' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:15:27 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:15:27 | 耗时 0 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '3');
2020-07-30 10:15:31 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:15:31 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:15:31 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:15:31 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:15:31 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 10:15:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:15:32 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:15:32 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 10:15:32 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:15:32 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-07-30 10:15:32 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:15:32 | 耗时 16 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 10:15:32 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:15:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-07-30 10:16:14 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 416 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 10:16:14 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 10:16:15 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 10:16:15 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 10:16:15 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 44ms. Found 0 Redis repository interfaces.
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$587d4508] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$59b5f3b3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$5a6ed5e0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$564c7a64] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$2cb740d1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:15 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 10:16:15 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 10:16:16 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 10:16:16 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 10:16:16 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 10:16:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 10:16:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 10:16:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 10:16:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 10:16:16 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 10:16:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 10:16:17 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 10:16:17 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 10:16:17 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 10:16:17 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 10:16:17 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 10:16:17 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 3923 ms
2020-07-30 10:16:18 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 10:16:18 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 10:16:18 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 10:16:18 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 10:16:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 10:16:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 10:16:18 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596075378746'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 10:16:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 10:16:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 10:16:18 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@15fd3088
2020-07-30 10:16:18 INFO  main p6spy 2020-07-30 10:16:18 | 耗时 2 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 10:16:19 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 10:16:20 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 10:16:20 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 10:16:20 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 10:16:20 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 10:16:20 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 10:16:20 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 10:16:21 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 10:16:21 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 10:16:21 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 10:16:21 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 10:16:21 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 8.106 seconds (JVM running for 9.284)
2020-07-30 10:16:21 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 10:16:21 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 10:16:22 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 10:16:22 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596075378746 started.
2020-07-30 10:16:22 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 10:16:22 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 10:16:22 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 10:16:22 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 10:16:22 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 10:16:22 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 10:16:22 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 10:16:22 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 22 ms
2020-07-30 10:16:23 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 10:16:24 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 10:16:26 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:16:26 | 耗时 13 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 10:16:27 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:16:27 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 10:16:27 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 10:16:27 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:16:27 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 10:16:27 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 10:16:28 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 10:16:28 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-07-30 10:16:28 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:16:28 | 耗时 16 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 10:16:28 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 10:16:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-07-30 10:16:30 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:16:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'beiyan' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 10:16:30 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 10:16:30 | 耗时 10 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '9');
2020-07-30 10:16:37 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596075378746_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 10:16:37 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596075378746_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596074884882"'s failed in-progress jobs.
2020-07-30 11:16:05 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 24876 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 11:16:05 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 11:16:07 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 11:16:07 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 11:16:07 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 43ms. Found 0 Redis repository interfaces.
2020-07-30 11:16:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4b8b131d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$4cc3c1c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$4d7ca3f5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$495a4879] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$1fc50ee6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 11:16:08 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 11:16:08 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 11:16:08 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 11:16:08 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 11:16:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 11:16:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 11:16:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 11:16:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 11:16:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy126] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:16:10 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 11:16:10 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 11:16:10 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 11:16:10 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 11:16:10 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 11:16:10 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5132 ms
2020-07-30 11:16:10 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 11:16:11 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 11:16:11 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 11:16:11 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 11:16:11 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 11:16:11 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 11:16:11 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596078971277'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 11:16:11 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 11:16:11 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 11:16:11 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@78324e97
2020-07-30 11:16:11 INFO  main p6spy 2020-07-30 11:16:11 | 耗时 2 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 11:16:12 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 11:16:12 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 11:16:12 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:16:12 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 11:16:12 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:16:12 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 11:16:12 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 11:16:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 11:16:13 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 11:16:13 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 11:16:13 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 11:16:13 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 9.039 seconds (JVM running for 10.345)
2020-07-30 11:16:13 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 11:16:13 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 11:16:14 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 11:16:14 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596078971277 started.
2020-07-30 11:16:14 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 11:16:14 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 11:16:14 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 11:16:14 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 11:16:14 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 11:16:15 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 11:16:15 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 11:16:15 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 19 ms
2020-07-30 11:16:15 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 11:16:16 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 11:16:24 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:16:24 | 耗时 5 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:16:24 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:16:24 | 耗时 5 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:16:24 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:16:24 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:16:25 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:16:25 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 11:16:27 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:16:27 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-07-30 11:16:27 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:16:27 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:16:27 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:16:27 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:16:27 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:16:27 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-07-30 11:16:27 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:16:27 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-07-30 11:16:27 INFO  Febs-Async-Thread1 p6spy 2020-07-30 11:16:27 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-07-30T11:16:27.648+0800' WHERE (USERNAME = 'MrBird');
2020-07-30 11:16:29 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596078971277_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 11:16:29 INFO  QuartzScheduler_FEBS_Scheduler-DESKTOP-PHMKGBV1596078971277_ClusterManager org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596075378746"'s failed in-progress jobs.
2020-07-30 11:16:33 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 11:16:33 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:16:33 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 11:16:33 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:19:08 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 25400 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 11:19:08 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 11:19:10 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 11:19:10 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 11:19:10 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 40ms. Found 0 Redis repository interfaces.
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$bd0a668e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$be431539] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$befbf766] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$bad99bea] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$91446257] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 11:19:10 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 11:19:10 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 11:19:10 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 11:19:11 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 11:19:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 11:19:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 11:19:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 11:19:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 11:19:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 11:19:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:19:12 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 11:19:12 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 11:19:12 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 11:19:12 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 11:19:12 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 11:19:12 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 3927 ms
2020-07-30 11:19:13 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 11:19:13 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 11:19:13 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 11:19:13 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 11:19:13 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 11:19:13 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 11:19:13 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596079153472'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 11:19:13 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 11:19:13 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 11:19:13 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1b120d48
2020-07-30 11:19:13 INFO  main p6spy 2020-07-30 11:19:13 | 耗时 10 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 11:19:14 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 11:19:14 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 11:19:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:19:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 11:19:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:19:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 11:19:14 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 11:19:15 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 11:19:15 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 11:19:15 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 11:19:15 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 11:19:15 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 7.549 seconds (JVM running for 9.008)
2020-07-30 11:19:15 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 11:19:15 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 11:19:16 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 11:19:16 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 11:19:16 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596078971277"'s failed in-progress jobs.
2020-07-30 11:19:16 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596079153472 started.
2020-07-30 11:19:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 11:19:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 11:19:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 11:19:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 11:19:16 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 11:19:17 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 11:19:17 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 11:19:17 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 16 ms
2020-07-30 11:19:17 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 11:19:18 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 11:19:20 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:19:20 | 耗时 15 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:19:20 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:19:20 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:19:20 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:19:20 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:19:21 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 11:19:21 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 11:19:32 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:19:32 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-07-30 11:19:32 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:19:32 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:19:32 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:19:32 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:19:32 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:19:32 | 耗时 0 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-07-30 11:19:32 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:19:32 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'MrBird' GROUP BY days;
2020-07-30 11:19:32 INFO  Febs-Async-Thread1 p6spy 2020-07-30 11:19:32 | 耗时 9 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-07-30T11:19:32.256+0800' WHERE (USERNAME = 'MrBird');
2020-07-30 11:36:33 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 26428 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 11:36:33 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 11:36:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 11:36:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 11:36:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$36c54ccd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$37fdfb78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$38b6dda5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$34948229] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$aff4896] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:36 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 11:36:36 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 11:36:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 11:36:37 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 11:36:37 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 11:36:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 11:36:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 11:36:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 11:36:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 11:36:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 11:36:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:36:39 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 11:36:39 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 11:36:39 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 11:36:39 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 11:36:39 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 11:36:39 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5429 ms
2020-07-30 11:36:39 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 11:36:40 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 11:36:40 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 11:36:40 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 11:36:40 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 11:36:40 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 11:36:40 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596080200309'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 11:36:40 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 11:36:40 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 11:36:40 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4d4bac56
2020-07-30 11:36:40 INFO  main p6spy 2020-07-30 11:36:40 | 耗时 10 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 11:36:41 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 11:36:41 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 11:36:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:36:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 11:36:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:36:41 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 11:36:41 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 11:36:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 11:36:42 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 11:36:42 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 11:36:43 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 11:36:43 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 10.109 seconds (JVM running for 11.765)
2020-07-30 11:36:43 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 11:36:43 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 11:36:43 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 11:36:43 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 11:36:43 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596079153472"'s failed in-progress jobs.
2020-07-30 11:36:43 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596080200309 started.
2020-07-30 11:36:44 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 11:36:44 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 11:36:44 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 11:36:44 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 11:36:44 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 11:36:44 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 11:36:44 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 11:36:44 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 29 ms
2020-07-30 11:36:44 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 11:36:46 INFO  http-nio-8080-exec-2 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 11:36:48 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:36:48 | 耗时 7 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:36:48 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:36:48 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:36:48 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:36:48 | 耗时 5 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:36:49 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 11:36:49 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 11:37:28 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:37:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:37:28 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:37:28 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:37:28 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:37:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:37:29 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:37:29 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 11:37:29 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:37:29 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 11:37:29 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:37:29 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 11:38:31 INFO  main cc.mrbird.febs.FebsShiroApplication Starting FebsShiroApplication on DESKTOP-PHMKGBV with PID 26412 (E:\myproject\FEBS-Shiro-2.0\target\classes started by 94119 in E:\myproject\FEBS-Shiro-2.0)
2020-07-30 11:38:31 INFO  main cc.mrbird.febs.FebsShiroApplication The following profiles are active: dev
2020-07-30 11:38:33 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-07-30 11:38:33 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-07-30 11:38:33 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 44ms. Found 0 Redis repository interfaces.
2020-07-30 11:38:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6d17762] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [cc.mrbird.febs.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$80a260d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$8c3083a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [cc.mrbird.febs.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$4a0acbe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataPermissionInterceptor' of type [cc.mrbird.febs.common.interceptor.DataPermissionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'desensitizationInterceptor' of type [cc.mrbird.febs.common.interceptor.DesensitizationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$db0b732b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSourceCreator' of type [com.baomidou.dynamic.datasource.creator.DataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-07-30 11:38:34 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-07-30 11:38:34 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-07-30 11:38:34 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-07-30 11:38:34 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-07-30 11:38:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [quartz] wrap p6spy plugin
2020-07-30 11:38:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-07-30 11:38:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource [base] wrap p6spy plugin
2020-07-30 11:38:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-07-30 11:38:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userDataPermissionService' of type [cc.mrbird.febs.system.service.impl.UserDataPermissionServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-30 11:38:36 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-07-30 11:38:36 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-07-30 11:38:36 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-07-30 11:38:36 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-07-30 11:38:36 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-07-30 11:38:36 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 4962 ms
2020-07-30 11:38:37 INFO  main cc.mrbird.febs.common.xss.XssFilter ------------ xss filter init ------------
2020-07-30 11:38:37 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-07-30 11:38:37 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-07-30 11:38:37 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-07-30 11:38:37 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-07-30 11:38:37 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-07-30 11:38:37 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'DESKTOP-PHMKGBV1596080317738'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-07-30 11:38:37 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2020-07-30 11:38:37 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-07-30 11:38:37 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6a261998
2020-07-30 11:38:37 INFO  main p6spy 2020-07-30 11:38:37 | 耗时 13 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2020-07-30 11:38:38 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-30 11:38:39 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:38:39 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2020-07-30 11:38:39 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2020-07-30 11:38:39 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'scheduleJobExecutorService'
2020-07-30 11:38:39 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-07-30 11:38:39 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-07-30 11:38:40 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-07-30 11:38:40 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-07-30 11:38:40 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-07-30 11:38:40 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-07-30 11:38:40 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-07-30 11:38:40 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-07-30 11:38:40 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2020-07-30 11:38:40 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-07-30 11:38:40 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-07-30 11:38:40 INFO  main cc.mrbird.febs.FebsShiroApplication Started FebsShiroApplication in 9.291 seconds (JVM running for 11.039)
2020-07-30 11:38:40 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-07-30 11:38:40 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-07-30 11:38:41 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-07-30 11:38:41 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-07-30 11:38:41 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-PHMKGBV1596080200309"'s failed in-progress jobs.
2020-07-30 11:38:41 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_DESKTOP-PHMKGBV1596080317738 started.
2020-07-30 11:38:41 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-07-30 11:38:41 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-07-30 11:38:41 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-07-30 11:38:41 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner                                                       
2020-07-30 11:38:41 INFO  main cc.mrbird.febs.common.runner.FebsStartedUpRunner 系统启动完毕，地址：http://192.168.137.1:8080/login
2020-07-30 11:38:41 INFO  http-nio-8080-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-30 11:38:41 INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-07-30 11:38:41 INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 47 ms
2020-07-30 11:38:41 INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-07-30 11:38:43 INFO  http-nio-8080-exec-1 cc.mrbird.febs.common.aspect.LimitAspect IP:192.168.137.1 第 1 次访问key为 [limit_get_captcha192.168.137.1]，描述为 [获取验证码] 的接口
2020-07-30 11:39:08 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:39:08 | 耗时 3 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:39:08 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:39:08 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:39:08 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:39:08 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:39:09 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 11:39:09 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 11:39:09 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 11:39:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:39:09 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 11:39:09 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 11:39:09 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 11:39:09 | 耗时 1 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 11:39:17 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:39:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:39:17 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:39:17 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 11:39:17 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:39:17 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 10,10;
2020-07-30 11:39:18 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 11:39:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:39:18 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 11:39:18 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 11:39:18 INFO  http-nio-8080-exec-6 p6spy 2020-07-30 11:39:18 | 耗时 1 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 11:39:26 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 11:39:26 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-07-30 11:39:26 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:39:26 | 耗时 38 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 11:39:26 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:39:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-07-30 11:40:15 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:15 | 耗时 11 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:40:15 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:15 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:40:15 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:15 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:40:16 INFO  http-nio-8080-exec-7 p6spy 2020-07-30 11:40:16 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird') ORDER BY m.order_num;
2020-07-30 11:40:16 INFO  http-nio-8080-exec-1 p6spy 2020-07-30 11:40:16 | 耗时 2 ms | SQL 语句：
SELECT DEPT_ID, PARENT_ID, DEPT_NAME, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_dept;
2020-07-30 11:40:16 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:40:16 | 耗时 50 ms | SQL 语句：
SELECT COUNT(1) FROM t_user u WHERE 1 = 1;
2020-07-30 11:40:16 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:40:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId ASC LIMIT 0,10;
2020-07-30 11:40:18 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:18 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'MrBird' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:40:18 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:18 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE 1 = 1;
2020-07-30 11:40:18 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:18 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE 1 = 1 ORDER BY orderId ASC LIMIT 0,10;
2020-07-30 11:40:25 INFO  http-nio-8080-exec-8 cc.mrbird.febs.common.aspect.LimitAspect IP:127.0.0.1 第 1 次访问key为 [limit_get_captcha127.0.0.1]，描述为 [获取验证码] 的接口
2020-07-30 11:40:35 INFO  http-nio-8080-exec-10 cc.mrbird.febs.common.aspect.LimitAspect IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2020-07-30 11:40:35 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:40:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'zhangsan' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:40:35 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:40:35 | 耗时 1 ms | SQL 语句：
SELECT USER_ID, dept_id FROM t_user_data_permission WHERE (USER_ID = '8');
2020-07-30 11:40:36 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:40:36 | 耗时 11 ms | SQL 语句：
INSERT INTO t_login_log (USERNAME, LOGIN_TIME, LOCATION, IP, `SYSTEM`, BROWSER) VALUES ('zhangsan', '2020-07-30T11:40:35.972+0800', '内网IP|0|0|内网IP|内网IP', '127.0.0.1', 'Windows 10', 'Chrome 84');
2020-07-30 11:40:36 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:40:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'zhangsan';
2020-07-30 11:40:36 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:40:36 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'zhangsan' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:40:36 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:40:36 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'zhangsan' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:40:37 INFO  http-nio-8080-exec-2 p6spy 2020-07-30 11:40:37 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'zhangsan') ORDER BY m.order_num;
2020-07-30 11:40:37 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 11:40:37 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-07-30 11:40:37 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 11:40:37 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:40:37 INFO  Febs-Async-Thread1 p6spy 2020-07-30 11:40:37 | 耗时 6 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-07-30T11:40:37.840+0800' WHERE (USERNAME = 'zhangsan');
2020-07-30 11:40:37 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 11:40:37 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:40:37 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 11:40:37 | 耗时 0 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-07-30 11:40:37 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 11:40:37 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'zhangsan' GROUP BY days;
2020-07-30 11:40:44 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:40:44 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, PARENT_ID, MENU_NAME, URL, PERMS, ICON, TYPE, ORDER_NUM, CREATE_TIME, MODIFY_TIME FROM t_menu ORDER BY ORDER_NUM ASC;
2020-07-30 11:40:44 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:44 | 耗时 31 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-07-30 11:40:44 INFO  http-nio-8080-exec-3 p6spy 2020-07-30 11:40:44 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-07-30 11:41:11 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 11:41:11 | 耗时 1 ms | SQL 语句：
UPDATE t_role SET ROLE_NAME = '销售人员', REMARK = '车辆销售', MODIFY_TIME = '2020-07-30T11:41:11.225+0800' WHERE ROLE_ID = 81;
2020-07-30 11:41:11 INFO  http-nio-8080-exec-9 p6spy 2020-07-30 11:41:11 | 耗时 0 ms | SQL 语句：
DELETE FROM t_role_menu WHERE (ROLE_ID IN ('81'));
2020-07-30 11:41:11 INFO  Febs-Async-Thread2 p6spy 2020-07-30 11:41:11 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (USERNAME, OPERATION, TIME, METHOD, PARAMS, IP, CREATE_TIME, LOCATION) VALUES ('MrBird', '修改角色', 41, 'cc.mrbird.febs.system.controller.RoleController.updateRole()', ' role: "Role(roleId=81, roleName=销售人员, remark=车辆销售, createTime=null, modifyTime=Thu Jul 30 11:41:11 CST 2020, menuIds=196,197,198,201,205,210,211,212,213)"', '192.168.137.1', '2020-07-30T11:41:11.266+0800', '内网IP|0|0|内网IP|内网IP');
2020-07-30 11:41:11 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:11 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'MrBird';
2020-07-30 11:41:11 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'MrBird' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:41:11 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:11 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_role r WHERE 1 = 1;
2020-07-30 11:41:11 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:11 | 耗时 2 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-07-30 11:41:13 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:41:13 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'zhangsan';
2020-07-30 11:41:13 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:41:13 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'zhangsan' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:41:13 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:41:13 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'zhangsan' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:41:14 INFO  http-nio-8080-exec-8 p6spy 2020-07-30 11:41:14 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'zhangsan') ORDER BY m.order_num;
2020-07-30 11:41:14 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:14 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-07-30 11:41:14 INFO  Febs-Async-Thread3 p6spy 2020-07-30 11:41:14 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-07-30T11:41:14.700+0800' WHERE (USERNAME = 'zhangsan');
2020-07-30 11:41:14 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:14 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:41:14 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:14 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE login_time BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 DAY);
2020-07-30 11:41:14 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:14 | 耗时 0 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-07-30 11:41:14 INFO  http-nio-8080-exec-4 p6spy 2020-07-30 11:41:14 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'zhangsan' GROUP BY days;
2020-07-30 11:41:16 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:41:16 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'zhangsan';
2020-07-30 11:41:16 INFO  http-nio-8080-exec-10 p6spy 2020-07-30 11:41:16 | 耗时 0 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'zhangsan' AND m.perms IS NOT NULL AND m.perms <> '';
2020-07-30 11:41:16 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:41:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'zhangsan' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-07-30 11:41:16 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:41:16 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ordertable o WHERE o.sales_id = 8;
2020-07-30 11:41:16 INFO  http-nio-8080-exec-5 p6spy 2020-07-30 11:41:16 | 耗时 0 ms | SQL 语句：
SELECT o.order_id orderId, o.create_time createTime, o.sales_id salesId, o.customer_name customerName, o.customer_phone customerPhone, o.vehicle_id vehicleId, o.price, o.status FROM ordertable o WHERE o.sales_id = 8 ORDER BY orderId ASC LIMIT 0,10;
